###############################################################################
# compass.properties
###############################################################################
# Sample compass.properties file for use with MCPatcher's Extended HD mod.
#
# This file is offered without any copyright restrictions. Please copy and
# modify it to suit your needs.  Then place it at compass.properties or
# clock.properties in the mcpatcher/dial folder of your texture pack.
#
# All property names are case-sensitive.
# All paths are relative to assets/minecraft unless otherwise stated.
###############################################################################

###############################################################################
# Properties for each layer
###############################################################################
# A custom compass or clock is defined as a series of texture layers.  Each
# layer can have its own independent scaling, rotation, and blending.  Layers
# are rendered one on top of the next starting at 0.  There must be at least
# two layers defined.
# NOTE: Each texture can be any size, not necessarily the same as the size of
# your texture pack, but the final rendered texture will always have the same
# resolution as your default compass/clock texture.

# (Required) Source texture.  Subsequent layers use source.1, source.2, etc.
# In 1.6, the filter property and %blur% prefix are not used.  To enable
# bilinear filtering, create a .mcmeta file for the texture containing:
# {
#   "texture": {
#     "blur": true,
#     "clamp": false
#   }
# }
source.0=<texture>

# (Optional) Scale of this layer.  Expand or shrink the texture along the x- or
# y-axis.
scaleX.0=1.0
scaleY.0=1.0

# (Optional) Center offset of this layer.  Use the range -1 .. 1.
offsetX.0=0.0
offsetY.0=0.0

# (Optional) Blend method.  See sky.properties for a list.
blend.0=alpha

# (Optional) Rotation.  Multiplier and offset applied to the angle.  For the
# compass the, angle points AWAY from spawn.  For the clock, the angle is the
# time of day.
#   displayed angle = rotationSpeed * original angle + rotationOffset
# Generally, rotationSpeed is either 0 (for fixed layers such as the base) or
# 1 (for the needle/dial), but other values can be used to create things like
# hour and minute hands.
rotationSpeed.0=0.0
rotationOffset.0=0.0

# The simplest case, a compass with a fixed base and a rotating needle, looks
# like
#   source.0=~/dial/compass_base.png
#   source.1=~/dial/compass_dial.png
#   scaleY.1=0.5
#   rotationSpeed.1=1
# compass_dial.png should have the needle pointing south (down).  If it is
# pointing up, either flip it in an image editor or add a rotationOffset
# property:
#   rotationOffset.1=180

###############################################################################
# Other properties
###############################################################################

# (Optional) Add this property to generate a default Mojang-style animation
# strip, which can serve as a fallback for users without custom compass/clock
# support.
# A series of frames 360/n degrees apart will be rendered into an animation at
# custom_{compass,clock}.png in your .minecraft folder.  Once you are
# satisfied with the file, move it to mcpatcher/dial/{compass,clock}.png in
# your texture pack.
# NOTE: YOU SHOULD NOT DISTRIBUTE YOUR TEXTURE PACK WITH THIS PROPERTY SET!
outputFrames=<number of animation frames>
